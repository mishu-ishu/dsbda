/*Input File 
Pune 
Mumbai 
Nashik 
Pune 
Nashik 
Kolapur */

import java.io.IOException; 
import java.util.*; 
import org.apache.hadoop.conf.*; 
import org.apache.hadoop.fs.*; 
import org.apache.hadoop.conf.*; 
import org.apache.hadoop.io.*; 
import org.apache.hadoop.mapreduce.*; 
import org.apache.hadoop.mapreduce.lib.input.*; 
import org.apache.hadoop.mapreduce.lib.output.*; 
import org.apache.hadoop.util.*; 
public class WordCount extends Configured implements Tool  
{ 
public static void main(String args[]) throws Exception 
{ 
int res = ToolRunner.run(new WordCount(), args); 
System.exit(res); 
} 
public int run(String[] args) throws Exception 
{ 
  Path inputPath = new Path(args[0]); 
      Path outputPath = new Path(args[1]); 
 
  Configuration conf = getConf(); 
      Job job = new Job(conf, this.getClass().toString()); 
      job.setJarByClass(WordCount.class); 
 
      FileInputFormat.setInputPaths(job, inputPath); 
      FileOutputFormat.setOutputPath(job, outputPath); 
 
      job.setJobName("WordCount"); 
   
   job.setMapperClass(Map.class); 
      job.setCombinerClass(Reduce.class); 
      job.setReducerClass(Reduce.class); 
      job.setMapOutputKeyClass(Text.class); 
      job.setMapOutputValueClass(IntWritable.class); 
      job.setOutputKeyClass(Text.class); 
      job.setOutputValueClass(IntWritable.class); 
      job.setInputFormatClass(TextInputFormat.class); 
      job.setOutputFormatClass(TextOutputFormat.class); 
    
     return job.waitForCompletion(true) ? 0 : 1; 
 } 
 
 public static class Map extends Mapper<LongWritable, Text, Text, 
IntWritable>  
 { 
  private final static IntWritable one = new IntWritable(1); 
  private Text word = new Text(); 
 
       
      public void map(LongWritable key, Text value, Mapper.Context 
context) throws IOException, InterruptedException  
      { 
         String line = value.toString(); 
         StringTokenizer tokenizer = new StringTokenizer(line);
while (tokenizer.hasMoreTokens())  
         { 
           word.set(tokenizer.nextToken()); 
           context.write(word, one); 
         } 
      } 
 } 
 
 public static class Reduce extends Reducer<Text, IntWritable, Text, 
IntWritable>  
 { 
   
      public void reduce(Text key, Iterable<IntWritable> values, Context 
context) throws IOException, InterruptedException  
      { 
         int sum = 0; 
         for(IntWritable value : values)  
         { 
           sum += value.get(); 
         }   
   context.write(key, new IntWritable(sum)); 
      }   
   } 
} 


main code:


B1) Java Code: WordCount Application using Hadoop MapReduce
// WordCount.java

import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class WordCount {
 public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
 private final static IntWritable one = new IntWritable(1);
 private Text word = new Text();
 public void map(Object key, Text value, Context context) throws IOException,
InterruptedException {
 StringTokenizer itr = new StringTokenizer(value.toString());
 while (itr.hasMoreTokens()) {
 word.set(itr.nextToken());
 context.write(word, one);
 }
 }
 }
 public static class IntSumReducer extends Reducer<Text, IntWritable, Text,
IntWritable> {
 public void reduce(Text key, Iterable<IntWritable> values, Context context) throws
IOException, InterruptedException {
 int sum = 0;
 for (IntWritable val : values) {
 sum += val.get();
 }
 context.write(key, new IntWritable(sum));
 }
 }
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = Job.getInstance(conf, "word count");
 job.setJarByClass(WordCount.class);
 job.setMapperClass(TokenizerMapper.class);
 job.setCombinerClass(IntSumReducer.class);
 job.setReducerClass(IntSumReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(IntWritable.class);
 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
}
